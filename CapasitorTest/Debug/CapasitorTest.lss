
CapasitorTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000810  000008a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000810  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011c  0080011c  000008c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fe1  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1f  00000000  00000000  000019d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e6  00000000  00000000  000023f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052f  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000700  00000000  00000000  000033eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003aeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  9e:	0c 94 06 04 	jmp	0x80c	; 0x80c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  a6:	42 9a       	sbi	0x08, 2	; 8
  a8:	00 c0       	rjmp	.+0      	; 0xaa <toggle_e+0x4>
  aa:	42 98       	cbi	0x08, 2	; 8
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	41 9a       	sbi	0x08, 1	; 8
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	41 98       	cbi	0x08, 1	; 8
  bc:	43 98       	cbi	0x08, 3	; 8
  be:	22 9a       	sbi	0x04, 2	; 4
  c0:	23 9a       	sbi	0x04, 3	; 4
  c2:	24 9a       	sbi	0x04, 4	; 4
  c4:	25 9a       	sbi	0x04, 5	; 4
  c6:	2d 98       	cbi	0x05, 5	; 5
  c8:	2c 98       	cbi	0x05, 4	; 5
  ca:	2b 98       	cbi	0x05, 3	; 5
  cc:	2a 98       	cbi	0x05, 2	; 5
  ce:	cc 23       	and	r28, r28
  d0:	0c f4       	brge	.+2      	; 0xd4 <lcd_write+0x26>
  d2:	2d 9a       	sbi	0x05, 5	; 5
  d4:	c6 fd       	sbrc	r28, 6
  d6:	2c 9a       	sbi	0x05, 4	; 5
  d8:	c5 fd       	sbrc	r28, 5
  da:	2b 9a       	sbi	0x05, 3	; 5
  dc:	c4 fd       	sbrc	r28, 4
  de:	2a 9a       	sbi	0x05, 2	; 5
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e4:	2d 98       	cbi	0x05, 5	; 5
  e6:	2c 98       	cbi	0x05, 4	; 5
  e8:	2b 98       	cbi	0x05, 3	; 5
  ea:	2a 98       	cbi	0x05, 2	; 5
  ec:	c3 fd       	sbrc	r28, 3
  ee:	2d 9a       	sbi	0x05, 5	; 5
  f0:	c2 fd       	sbrc	r28, 2
  f2:	2c 9a       	sbi	0x05, 4	; 5
  f4:	c1 fd       	sbrc	r28, 1
  f6:	2b 9a       	sbi	0x05, 3	; 5
  f8:	c0 fd       	sbrc	r28, 0
  fa:	2a 9a       	sbi	0x05, 2	; 5
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 100:	2a 9a       	sbi	0x05, 2	; 5
 102:	2b 9a       	sbi	0x05, 3	; 5
 104:	2c 9a       	sbi	0x05, 4	; 5
 106:	2d 9a       	sbi	0x05, 5	; 5
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_read>:
 10c:	88 23       	and	r24, r24
 10e:	11 f0       	breq	.+4      	; 0x114 <lcd_read+0x8>
 110:	41 9a       	sbi	0x08, 1	; 8
 112:	01 c0       	rjmp	.+2      	; 0x116 <lcd_read+0xa>
 114:	41 98       	cbi	0x08, 1	; 8
 116:	43 9a       	sbi	0x08, 3	; 8
 118:	22 98       	cbi	0x04, 2	; 4
 11a:	23 98       	cbi	0x04, 3	; 4
 11c:	24 98       	cbi	0x04, 4	; 4
 11e:	25 98       	cbi	0x04, 5	; 4
 120:	42 9a       	sbi	0x08, 2	; 8
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_read+0x18>
 124:	1a 9b       	sbis	0x03, 2	; 3
 126:	02 c0       	rjmp	.+4      	; 0x12c <lcd_read+0x20>
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	01 c0       	rjmp	.+2      	; 0x12e <lcd_read+0x22>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	1b 99       	sbic	0x03, 3	; 3
 130:	80 62       	ori	r24, 0x20	; 32
 132:	1c 99       	sbic	0x03, 4	; 3
 134:	80 64       	ori	r24, 0x40	; 64
 136:	1d 99       	sbic	0x03, 5	; 3
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	42 98       	cbi	0x08, 2	; 8
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_read+0x32>
 13e:	42 9a       	sbi	0x08, 2	; 8
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_read+0x36>
 142:	1a 99       	sbic	0x03, 2	; 3
 144:	81 60       	ori	r24, 0x01	; 1
 146:	1b 99       	sbic	0x03, 3	; 3
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	1c 99       	sbic	0x03, 4	; 3
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	1d 99       	sbic	0x03, 5	; 3
 150:	88 60       	ori	r24, 0x08	; 8
 152:	42 98       	cbi	0x08, 2	; 8
 154:	08 95       	ret

00000156 <lcd_waitbusy>:
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	c0 e6       	ldi	r28, 0x60	; 96
 15c:	da ee       	ldi	r29, 0xEA	; 234
 15e:	01 c0       	rjmp	.+2      	; 0x162 <lcd_waitbusy+0xc>
 160:	21 97       	sbiw	r28, 0x01	; 1
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 168:	88 23       	and	r24, r24
 16a:	14 f4       	brge	.+4      	; 0x170 <lcd_waitbusy+0x1a>
 16c:	20 97       	sbiw	r28, 0x00	; 0
 16e:	c1 f7       	brne	.-16     	; 0x160 <lcd_waitbusy+0xa>
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_waitbusy+0x1e>
 178:	cd 2b       	or	r28, r29
 17a:	21 f0       	breq	.+8      	; 0x184 <lcd_waitbusy+0x2e>
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_waitbusy+0x30>
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <lcd_command>:
 18c:	cf 93       	push	r28
 18e:	c8 2f       	mov	r28, r24
 190:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	8c 2f       	mov	r24, r28
 198:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <lcd_gotoxy>:
 1a0:	61 11       	cpse	r22, r1
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <lcd_gotoxy+0xc>
 1a4:	80 58       	subi	r24, 0x80	; 128
 1a6:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
 1aa:	08 95       	ret
 1ac:	80 54       	subi	r24, 0x40	; 64
 1ae:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
 1b2:	08 95       	ret

000001b4 <lcd_clrscr>:
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
 1ba:	08 95       	ret

000001bc <lcd_putc>:
 1bc:	cf 93       	push	r28
 1be:	c8 2f       	mov	r28, r24
 1c0:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 1c4:	ca 30       	cpi	r28, 0x0A	; 10
 1c6:	49 f4       	brne	.+18     	; 0x1da <lcd_putc+0x1e>
 1c8:	80 34       	cpi	r24, 0x40	; 64
 1ca:	10 f0       	brcs	.+4      	; 0x1d0 <lcd_putc+0x14>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <lcd_putc+0x16>
 1d0:	80 e4       	ldi	r24, 0x40	; 64
 1d2:	80 58       	subi	r24, 0x80	; 128
 1d4:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
 1d8:	13 c0       	rjmp	.+38     	; 0x200 <lcd_putc+0x44>
 1da:	80 31       	cpi	r24, 0x10	; 16
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <lcd_putc+0x2c>
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	80 ec       	ldi	r24, 0xC0	; 192
 1e2:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 1e6:	06 c0       	rjmp	.+12     	; 0x1f4 <lcd_putc+0x38>
 1e8:	80 35       	cpi	r24, 0x50	; 80
 1ea:	21 f4       	brne	.+8      	; 0x1f4 <lcd_putc+0x38>
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 1f4:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	8c 2f       	mov	r24, r28
 1fc:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <lcd_puts>:
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	fc 01       	movw	r30, r24
 20e:	80 81       	ld	r24, Z
 210:	88 23       	and	r24, r24
 212:	29 f0       	breq	.+10     	; 0x21e <lcd_puts+0x1a>
 214:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_putc>
 218:	89 91       	ld	r24, Y+
 21a:	81 11       	cpse	r24, r1
 21c:	fb cf       	rjmp	.-10     	; 0x214 <lcd_puts+0x10>
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
uint8_t lcd_init(uint8_t dispAttr)
{
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 22c:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 22e:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 230:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 232:	22 9a       	sbi	0x04, 2	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 234:	23 9a       	sbi	0x04, 3	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 236:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 238:	25 9a       	sbi	0x04, 5	; 4
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 23a:	80 e9       	ldi	r24, 0x90	; 144
 23c:	99 e3       	ldi	r25, 0x39	; 57
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 242:	2b 9a       	sbi	0x05, 3	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 244:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_toggle();
 246:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 24a:	85 ef       	ldi	r24, 0xF5	; 245
 24c:	91 e1       	ldi	r25, 0x11	; 17
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 256:	ca e3       	ldi	r28, 0x3A	; 58
 258:	d0 e0       	ldi	r29, 0x00	; 0
 25a:	ce 01       	movw	r24, r28
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 264:	ce 01       	movw	r24, r28
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 26a:	2a 98       	cbi	0x05, 2	; 5
    lcd_e_toggle();
 26c:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 270:	21 97       	sbiw	r28, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 274:	88 e2       	ldi	r24, 0x28	; 40
 276:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
#endif
    if (lcd_waitbusy() != 0xff)
 27a:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 27e:	8f 3f       	cpi	r24, 0xFF	; 255
 280:	61 f0       	breq	.+24     	; 0x29a <lcd_init+0x76>
    {
      lcd_command(LCD_DISP_OFF);              /* display off                  */
 282:	88 e0       	ldi	r24, 0x08	; 8
 284:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
      lcd_clrscr();                           /* display clear                */
 288:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_clrscr>
      lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
      lcd_command(dispAttr);                  /* display/cursor control       */
 292:	81 2f       	mov	r24, r17
 294:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_command>
      return 0;
 298:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      return 0xff;
    }

}/* lcd_init */
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	08 95       	ret

000002a2 <init_display>:
}

void ADCRead(){
	ADCSRA |= (1 << ADSC);         // start conversion
	while (ADCSRA & (1 << ADSC)) ; //wait for the ADC to ready
}
 2a2:	8c e0       	ldi	r24, 0x0C	; 12
 2a4:	0e 94 12 01 	call	0x224	; 0x224 <lcd_init>
 2a8:	08 95       	ret

000002aa <init>:
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	84 b9       	out	0x04, r24	; 4
 2b2:	17 b8       	out	0x07, r1	; 7
 2b4:	80 e4       	ldi	r24, 0x40	; 64
 2b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 2ba:	ca e7       	ldi	r28, 0x7A	; 122
 2bc:	d0 e0       	ldi	r29, 0x00	; 0
 2be:	8b ea       	ldi	r24, 0xAB	; 171
 2c0:	88 83       	st	Y, r24
 2c2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 2c6:	85 e0       	ldi	r24, 0x05	; 5
 2c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2cc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <init_display>
 2d0:	88 81       	ld	r24, Y
 2d2:	80 64       	ori	r24, 0x40	; 64
 2d4:	88 83       	st	Y, r24
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <main>:

volatile uint16_t adcValue;
int main (void)
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	64 97       	sbiw	r28, 0x14	; 20
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
	uint16_t elapsedTime;
	float microFarads;
	float nanoFarads;
	char c[20];
	init();
 2f0:	0e 94 55 01 	call	0x2aa	; 0x2aa <init>
	sei();
 2f4:	78 94       	sei
	while (1)            // infinite main loop
	{
		PORTB = 0x01;      // switch PB0 to 1 charge pin
 2f6:	bb 24       	eor	r11, r11
 2f8:	b3 94       	inc	r11
		TCNT1 = 0;         // restart TIMER1 from zero
 2fa:	04 e8       	ldi	r16, 0x84	; 132
 2fc:	10 e0       	ldi	r17, 0x00	; 0
	char c[20];
	init();
	sei();
	while (1)            // infinite main loop
	{
		PORTB = 0x01;      // switch PB0 to 1 charge pin
 2fe:	b5 b8       	out	0x05, r11	; 5
		TCNT1 = 0;         // restart TIMER1 from zero
 300:	f8 01       	movw	r30, r16
 302:	11 82       	std	Z+1, r1	; 0x01
 304:	10 82       	st	Z, r1
		//ADCRead(); no need free run adc enabled
		while (adcValue < 648)
 306:	64 c0       	rjmp	.+200    	; 0x3d0 <main+0xf4>
		{
			//ADCRead();
			elapsedTime = TCNT1;
 308:	f8 01       	movw	r30, r16
 30a:	60 81       	ld	r22, Z
 30c:	71 81       	ldd	r23, Z+1	; 0x01
			microFarads = ((float)elapsedTime / resistorValue) * 1000;
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 b8 02 	call	0x570	; 0x570 <__floatunsisf>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	4a e7       	ldi	r20, 0x7A	; 122
 31c:	54 e4       	ldi	r21, 0x44	; 68
 31e:	0e 94 17 02 	call	0x42e	; 0x42e <__divsf3>
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	4a e7       	ldi	r20, 0x7A	; 122
 328:	54 e4       	ldi	r21, 0x44	; 68
 32a:	0e 94 4b 03 	call	0x696	; 0x696 <__mulsf3>
 32e:	6b 01       	movw	r12, r22
 330:	7c 01       	movw	r14, r24
			
			if (microFarads > 1)
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	40 e8       	ldi	r20, 0x80	; 128
 338:	5f e3       	ldi	r21, 0x3F	; 63
 33a:	0e 94 46 03 	call	0x68c	; 0x68c <__gesf2>
 33e:	18 16       	cp	r1, r24
 340:	0c f5       	brge	.+66     	; 0x384 <main+0xa8>
			{
				lcd_clrscr();
 342:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_clrscr>
				lcd_gotoxy(0,0);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 34e:	c7 01       	movw	r24, r14
 350:	b6 01       	movw	r22, r12
 352:	0e 94 89 02 	call	0x512	; 0x512 <__fixunssfsi>
 356:	dc 01       	movw	r26, r24
 358:	cb 01       	movw	r24, r22
 35a:	4a e0       	ldi	r20, 0x0A	; 10
 35c:	be 01       	movw	r22, r28
 35e:	6f 5f       	subi	r22, 0xFF	; 255
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__utoa_ncheck>
				lcd_puts(strcat(utoa(microFarads, c, 10), " Micro farad\n"));
 366:	dc 01       	movw	r26, r24
 368:	0d 90       	ld	r0, X+
 36a:	00 20       	and	r0, r0
 36c:	e9 f7       	brne	.-6      	; 0x368 <main+0x8c>
 36e:	11 97       	sbiw	r26, 0x01	; 1
 370:	2e e0       	ldi	r18, 0x0E	; 14
 372:	e0 e0       	ldi	r30, 0x00	; 0
 374:	f1 e0       	ldi	r31, 0x01	; 1
 376:	01 90       	ld	r0, Z+
 378:	0d 92       	st	X+, r0
 37a:	2a 95       	dec	r18
 37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x9a>
 37e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
 382:	26 c0       	rjmp	.+76     	; 0x3d0 <main+0xf4>
			else
			{
				// if value is smaller than one microFarad, convert to nanoFarads (10^-9 Farad).
				// This is  a workaround because Serial.print will not print floats
				nanoFarads = microFarads * 1000000.0;      // multiply by 1000 to convert to nanoFarads (10^-9 Farads)
				lcd_clrscr();
 384:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_clrscr>
				lcd_gotoxy(0,0);
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_gotoxy>
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	34 e2       	ldi	r19, 0x24	; 36
 394:	44 e7       	ldi	r20, 0x74	; 116
 396:	59 e4       	ldi	r21, 0x49	; 73
 398:	c7 01       	movw	r24, r14
 39a:	b6 01       	movw	r22, r12
 39c:	0e 94 4b 03 	call	0x696	; 0x696 <__mulsf3>
 3a0:	0e 94 89 02 	call	0x512	; 0x512 <__fixunssfsi>
 3a4:	dc 01       	movw	r26, r24
 3a6:	cb 01       	movw	r24, r22
 3a8:	4a e0       	ldi	r20, 0x0A	; 10
 3aa:	be 01       	movw	r22, r28
 3ac:	6f 5f       	subi	r22, 0xFF	; 255
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__utoa_ncheck>
				lcd_puts(strcat(utoa(nanoFarads, c, 10), " Nano farad\n"));
 3b4:	dc 01       	movw	r26, r24
 3b6:	0d 90       	ld	r0, X+
 3b8:	00 20       	and	r0, r0
 3ba:	e9 f7       	brne	.-6      	; 0x3b6 <main+0xda>
 3bc:	11 97       	sbiw	r26, 0x01	; 1
 3be:	2d e0       	ldi	r18, 0x0D	; 13
 3c0:	ee e0       	ldi	r30, 0x0E	; 14
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	01 90       	ld	r0, Z+
 3c6:	0d 92       	st	X+, r0
 3c8:	2a 95       	dec	r18
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <main+0xe8>
 3cc:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
	while (1)            // infinite main loop
	{
		PORTB = 0x01;      // switch PB0 to 1 charge pin
		TCNT1 = 0;         // restart TIMER1 from zero
		//ADCRead(); no need free run adc enabled
		while (adcValue < 648)
 3d0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 3d4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 3d8:	88 38       	cpi	r24, 0x88	; 136
 3da:	92 40       	sbci	r25, 0x02	; 2
 3dc:	08 f4       	brcc	.+2      	; 0x3e0 <main+0x104>
 3de:	94 cf       	rjmp	.-216    	; 0x308 <main+0x2c>
				lcd_gotoxy(0,0);
				lcd_puts(strcat(utoa(nanoFarads, c, 10), " Nano farad\n"));
			}
		}
		
		PORTB = 0x00;      // switch PB0 to 0 charge pin
 3e0:	15 b8       	out	0x05, r1	; 5
		DDRD = 0x01;       // pin 0 of PORTD as output discharge pin
 3e2:	ba b8       	out	0x0a, r11	; 10
		PORTD = 0x00;      // switch PB0 to 0 discharge pin
 3e4:	1b b8       	out	0x0b, r1	; 11
		while (adcValue > 0)
 3e6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 3ea:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 3ee:	89 2b       	or	r24, r25
 3f0:	d1 f7       	brne	.-12     	; 0x3e6 <main+0x10a>
			/*
			wait for the capacitor to discharged.
			*/
			//ADCRead();// no need free runn adc enabled
		}
		DDRD = 0x00;       // pin 0 of PORTD as input discharge pin
 3f2:	1a b8       	out	0x0a, r1	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f4:	87 ea       	ldi	r24, 0xA7	; 167
 3f6:	91 e6       	ldi	r25, 0x61	; 97
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <main+0x11c>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x122>
 3fe:	00 00       	nop
 400:	7e cf       	rjmp	.-260    	; 0x2fe <main+0x22>

00000402 <__vector_21>:
		_delay_ms(100);
	}
	
}

ISR(ADC_vect){
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
	adcValue = ADC;
 410:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 414:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 418:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 41c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
}
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <__divsf3>:
 42e:	0e 94 2b 02 	call	0x456	; 0x456 <__divsf3x>
 432:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_round>
 436:	0e 94 05 03 	call	0x60a	; 0x60a <__fp_pscB>
 43a:	58 f0       	brcs	.+22     	; 0x452 <__divsf3+0x24>
 43c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_pscA>
 440:	40 f0       	brcs	.+16     	; 0x452 <__divsf3+0x24>
 442:	29 f4       	brne	.+10     	; 0x44e <__divsf3+0x20>
 444:	5f 3f       	cpi	r21, 0xFF	; 255
 446:	29 f0       	breq	.+10     	; 0x452 <__divsf3+0x24>
 448:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_inf>
 44c:	51 11       	cpse	r21, r1
 44e:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_szero>
 452:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_nan>

00000456 <__divsf3x>:
 456:	0e 94 1d 03 	call	0x63a	; 0x63a <__fp_split3>
 45a:	68 f3       	brcs	.-38     	; 0x436 <__divsf3+0x8>

0000045c <__divsf3_pse>:
 45c:	99 23       	and	r25, r25
 45e:	b1 f3       	breq	.-20     	; 0x44c <__divsf3+0x1e>
 460:	55 23       	and	r21, r21
 462:	91 f3       	breq	.-28     	; 0x448 <__divsf3+0x1a>
 464:	95 1b       	sub	r25, r21
 466:	55 0b       	sbc	r21, r21
 468:	bb 27       	eor	r27, r27
 46a:	aa 27       	eor	r26, r26
 46c:	62 17       	cp	r22, r18
 46e:	73 07       	cpc	r23, r19
 470:	84 07       	cpc	r24, r20
 472:	38 f0       	brcs	.+14     	; 0x482 <__divsf3_pse+0x26>
 474:	9f 5f       	subi	r25, 0xFF	; 255
 476:	5f 4f       	sbci	r21, 0xFF	; 255
 478:	22 0f       	add	r18, r18
 47a:	33 1f       	adc	r19, r19
 47c:	44 1f       	adc	r20, r20
 47e:	aa 1f       	adc	r26, r26
 480:	a9 f3       	breq	.-22     	; 0x46c <__divsf3_pse+0x10>
 482:	35 d0       	rcall	.+106    	; 0x4ee <__divsf3_pse+0x92>
 484:	0e 2e       	mov	r0, r30
 486:	3a f0       	brmi	.+14     	; 0x496 <__divsf3_pse+0x3a>
 488:	e0 e8       	ldi	r30, 0x80	; 128
 48a:	32 d0       	rcall	.+100    	; 0x4f0 <__divsf3_pse+0x94>
 48c:	91 50       	subi	r25, 0x01	; 1
 48e:	50 40       	sbci	r21, 0x00	; 0
 490:	e6 95       	lsr	r30
 492:	00 1c       	adc	r0, r0
 494:	ca f7       	brpl	.-14     	; 0x488 <__divsf3_pse+0x2c>
 496:	2b d0       	rcall	.+86     	; 0x4ee <__divsf3_pse+0x92>
 498:	fe 2f       	mov	r31, r30
 49a:	29 d0       	rcall	.+82     	; 0x4ee <__divsf3_pse+0x92>
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	88 1f       	adc	r24, r24
 4a2:	bb 1f       	adc	r27, r27
 4a4:	26 17       	cp	r18, r22
 4a6:	37 07       	cpc	r19, r23
 4a8:	48 07       	cpc	r20, r24
 4aa:	ab 07       	cpc	r26, r27
 4ac:	b0 e8       	ldi	r27, 0x80	; 128
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <__divsf3_pse+0x56>
 4b0:	bb 0b       	sbc	r27, r27
 4b2:	80 2d       	mov	r24, r0
 4b4:	bf 01       	movw	r22, r30
 4b6:	ff 27       	eor	r31, r31
 4b8:	93 58       	subi	r25, 0x83	; 131
 4ba:	5f 4f       	sbci	r21, 0xFF	; 255
 4bc:	3a f0       	brmi	.+14     	; 0x4cc <__divsf3_pse+0x70>
 4be:	9e 3f       	cpi	r25, 0xFE	; 254
 4c0:	51 05       	cpc	r21, r1
 4c2:	78 f0       	brcs	.+30     	; 0x4e2 <__divsf3_pse+0x86>
 4c4:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_inf>
 4c8:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_szero>
 4cc:	5f 3f       	cpi	r21, 0xFF	; 255
 4ce:	e4 f3       	brlt	.-8      	; 0x4c8 <__divsf3_pse+0x6c>
 4d0:	98 3e       	cpi	r25, 0xE8	; 232
 4d2:	d4 f3       	brlt	.-12     	; 0x4c8 <__divsf3_pse+0x6c>
 4d4:	86 95       	lsr	r24
 4d6:	77 95       	ror	r23
 4d8:	67 95       	ror	r22
 4da:	b7 95       	ror	r27
 4dc:	f7 95       	ror	r31
 4de:	9f 5f       	subi	r25, 0xFF	; 255
 4e0:	c9 f7       	brne	.-14     	; 0x4d4 <__divsf3_pse+0x78>
 4e2:	88 0f       	add	r24, r24
 4e4:	91 1d       	adc	r25, r1
 4e6:	96 95       	lsr	r25
 4e8:	87 95       	ror	r24
 4ea:	97 f9       	bld	r25, 7
 4ec:	08 95       	ret
 4ee:	e1 e0       	ldi	r30, 0x01	; 1
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	88 1f       	adc	r24, r24
 4f6:	bb 1f       	adc	r27, r27
 4f8:	62 17       	cp	r22, r18
 4fa:	73 07       	cpc	r23, r19
 4fc:	84 07       	cpc	r24, r20
 4fe:	ba 07       	cpc	r27, r26
 500:	20 f0       	brcs	.+8      	; 0x50a <__divsf3_pse+0xae>
 502:	62 1b       	sub	r22, r18
 504:	73 0b       	sbc	r23, r19
 506:	84 0b       	sbc	r24, r20
 508:	ba 0b       	sbc	r27, r26
 50a:	ee 1f       	adc	r30, r30
 50c:	88 f7       	brcc	.-30     	; 0x4f0 <__divsf3_pse+0x94>
 50e:	e0 95       	com	r30
 510:	08 95       	ret

00000512 <__fixunssfsi>:
 512:	0e 94 25 03 	call	0x64a	; 0x64a <__fp_splitA>
 516:	88 f0       	brcs	.+34     	; 0x53a <__fixunssfsi+0x28>
 518:	9f 57       	subi	r25, 0x7F	; 127
 51a:	98 f0       	brcs	.+38     	; 0x542 <__fixunssfsi+0x30>
 51c:	b9 2f       	mov	r27, r25
 51e:	99 27       	eor	r25, r25
 520:	b7 51       	subi	r27, 0x17	; 23
 522:	b0 f0       	brcs	.+44     	; 0x550 <__fixunssfsi+0x3e>
 524:	e1 f0       	breq	.+56     	; 0x55e <__fixunssfsi+0x4c>
 526:	66 0f       	add	r22, r22
 528:	77 1f       	adc	r23, r23
 52a:	88 1f       	adc	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	1a f0       	brmi	.+6      	; 0x536 <__fixunssfsi+0x24>
 530:	ba 95       	dec	r27
 532:	c9 f7       	brne	.-14     	; 0x526 <__fixunssfsi+0x14>
 534:	14 c0       	rjmp	.+40     	; 0x55e <__fixunssfsi+0x4c>
 536:	b1 30       	cpi	r27, 0x01	; 1
 538:	91 f0       	breq	.+36     	; 0x55e <__fixunssfsi+0x4c>
 53a:	0e 94 3f 03 	call	0x67e	; 0x67e <__fp_zero>
 53e:	b1 e0       	ldi	r27, 0x01	; 1
 540:	08 95       	ret
 542:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__fp_zero>
 546:	67 2f       	mov	r22, r23
 548:	78 2f       	mov	r23, r24
 54a:	88 27       	eor	r24, r24
 54c:	b8 5f       	subi	r27, 0xF8	; 248
 54e:	39 f0       	breq	.+14     	; 0x55e <__fixunssfsi+0x4c>
 550:	b9 3f       	cpi	r27, 0xF9	; 249
 552:	cc f3       	brlt	.-14     	; 0x546 <__fixunssfsi+0x34>
 554:	86 95       	lsr	r24
 556:	77 95       	ror	r23
 558:	67 95       	ror	r22
 55a:	b3 95       	inc	r27
 55c:	d9 f7       	brne	.-10     	; 0x554 <__fixunssfsi+0x42>
 55e:	3e f4       	brtc	.+14     	; 0x56e <__fixunssfsi+0x5c>
 560:	90 95       	com	r25
 562:	80 95       	com	r24
 564:	70 95       	com	r23
 566:	61 95       	neg	r22
 568:	7f 4f       	sbci	r23, 0xFF	; 255
 56a:	8f 4f       	sbci	r24, 0xFF	; 255
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	08 95       	ret

00000570 <__floatunsisf>:
 570:	e8 94       	clt
 572:	09 c0       	rjmp	.+18     	; 0x586 <__floatsisf+0x12>

00000574 <__floatsisf>:
 574:	97 fb       	bst	r25, 7
 576:	3e f4       	brtc	.+14     	; 0x586 <__floatsisf+0x12>
 578:	90 95       	com	r25
 57a:	80 95       	com	r24
 57c:	70 95       	com	r23
 57e:	61 95       	neg	r22
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	99 23       	and	r25, r25
 588:	a9 f0       	breq	.+42     	; 0x5b4 <__floatsisf+0x40>
 58a:	f9 2f       	mov	r31, r25
 58c:	96 e9       	ldi	r25, 0x96	; 150
 58e:	bb 27       	eor	r27, r27
 590:	93 95       	inc	r25
 592:	f6 95       	lsr	r31
 594:	87 95       	ror	r24
 596:	77 95       	ror	r23
 598:	67 95       	ror	r22
 59a:	b7 95       	ror	r27
 59c:	f1 11       	cpse	r31, r1
 59e:	f8 cf       	rjmp	.-16     	; 0x590 <__floatsisf+0x1c>
 5a0:	fa f4       	brpl	.+62     	; 0x5e0 <__floatsisf+0x6c>
 5a2:	bb 0f       	add	r27, r27
 5a4:	11 f4       	brne	.+4      	; 0x5aa <__floatsisf+0x36>
 5a6:	60 ff       	sbrs	r22, 0
 5a8:	1b c0       	rjmp	.+54     	; 0x5e0 <__floatsisf+0x6c>
 5aa:	6f 5f       	subi	r22, 0xFF	; 255
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	8f 4f       	sbci	r24, 0xFF	; 255
 5b0:	9f 4f       	sbci	r25, 0xFF	; 255
 5b2:	16 c0       	rjmp	.+44     	; 0x5e0 <__floatsisf+0x6c>
 5b4:	88 23       	and	r24, r24
 5b6:	11 f0       	breq	.+4      	; 0x5bc <__floatsisf+0x48>
 5b8:	96 e9       	ldi	r25, 0x96	; 150
 5ba:	11 c0       	rjmp	.+34     	; 0x5de <__floatsisf+0x6a>
 5bc:	77 23       	and	r23, r23
 5be:	21 f0       	breq	.+8      	; 0x5c8 <__floatsisf+0x54>
 5c0:	9e e8       	ldi	r25, 0x8E	; 142
 5c2:	87 2f       	mov	r24, r23
 5c4:	76 2f       	mov	r23, r22
 5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <__floatsisf+0x5e>
 5c8:	66 23       	and	r22, r22
 5ca:	71 f0       	breq	.+28     	; 0x5e8 <__floatsisf+0x74>
 5cc:	96 e8       	ldi	r25, 0x86	; 134
 5ce:	86 2f       	mov	r24, r22
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	2a f0       	brmi	.+10     	; 0x5e0 <__floatsisf+0x6c>
 5d6:	9a 95       	dec	r25
 5d8:	66 0f       	add	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	da f7       	brpl	.-10     	; 0x5d6 <__floatsisf+0x62>
 5e0:	88 0f       	add	r24, r24
 5e2:	96 95       	lsr	r25
 5e4:	87 95       	ror	r24
 5e6:	97 f9       	bld	r25, 7
 5e8:	08 95       	ret

000005ea <__fp_inf>:
 5ea:	97 f9       	bld	r25, 7
 5ec:	9f 67       	ori	r25, 0x7F	; 127
 5ee:	80 e8       	ldi	r24, 0x80	; 128
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	08 95       	ret

000005f6 <__fp_nan>:
 5f6:	9f ef       	ldi	r25, 0xFF	; 255
 5f8:	80 ec       	ldi	r24, 0xC0	; 192
 5fa:	08 95       	ret

000005fc <__fp_pscA>:
 5fc:	00 24       	eor	r0, r0
 5fe:	0a 94       	dec	r0
 600:	16 16       	cp	r1, r22
 602:	17 06       	cpc	r1, r23
 604:	18 06       	cpc	r1, r24
 606:	09 06       	cpc	r0, r25
 608:	08 95       	ret

0000060a <__fp_pscB>:
 60a:	00 24       	eor	r0, r0
 60c:	0a 94       	dec	r0
 60e:	12 16       	cp	r1, r18
 610:	13 06       	cpc	r1, r19
 612:	14 06       	cpc	r1, r20
 614:	05 06       	cpc	r0, r21
 616:	08 95       	ret

00000618 <__fp_round>:
 618:	09 2e       	mov	r0, r25
 61a:	03 94       	inc	r0
 61c:	00 0c       	add	r0, r0
 61e:	11 f4       	brne	.+4      	; 0x624 <__fp_round+0xc>
 620:	88 23       	and	r24, r24
 622:	52 f0       	brmi	.+20     	; 0x638 <__fp_round+0x20>
 624:	bb 0f       	add	r27, r27
 626:	40 f4       	brcc	.+16     	; 0x638 <__fp_round+0x20>
 628:	bf 2b       	or	r27, r31
 62a:	11 f4       	brne	.+4      	; 0x630 <__fp_round+0x18>
 62c:	60 ff       	sbrs	r22, 0
 62e:	04 c0       	rjmp	.+8      	; 0x638 <__fp_round+0x20>
 630:	6f 5f       	subi	r22, 0xFF	; 255
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	08 95       	ret

0000063a <__fp_split3>:
 63a:	57 fd       	sbrc	r21, 7
 63c:	90 58       	subi	r25, 0x80	; 128
 63e:	44 0f       	add	r20, r20
 640:	55 1f       	adc	r21, r21
 642:	59 f0       	breq	.+22     	; 0x65a <__fp_splitA+0x10>
 644:	5f 3f       	cpi	r21, 0xFF	; 255
 646:	71 f0       	breq	.+28     	; 0x664 <__fp_splitA+0x1a>
 648:	47 95       	ror	r20

0000064a <__fp_splitA>:
 64a:	88 0f       	add	r24, r24
 64c:	97 fb       	bst	r25, 7
 64e:	99 1f       	adc	r25, r25
 650:	61 f0       	breq	.+24     	; 0x66a <__fp_splitA+0x20>
 652:	9f 3f       	cpi	r25, 0xFF	; 255
 654:	79 f0       	breq	.+30     	; 0x674 <__fp_splitA+0x2a>
 656:	87 95       	ror	r24
 658:	08 95       	ret
 65a:	12 16       	cp	r1, r18
 65c:	13 06       	cpc	r1, r19
 65e:	14 06       	cpc	r1, r20
 660:	55 1f       	adc	r21, r21
 662:	f2 cf       	rjmp	.-28     	; 0x648 <__fp_split3+0xe>
 664:	46 95       	lsr	r20
 666:	f1 df       	rcall	.-30     	; 0x64a <__fp_splitA>
 668:	08 c0       	rjmp	.+16     	; 0x67a <__fp_splitA+0x30>
 66a:	16 16       	cp	r1, r22
 66c:	17 06       	cpc	r1, r23
 66e:	18 06       	cpc	r1, r24
 670:	99 1f       	adc	r25, r25
 672:	f1 cf       	rjmp	.-30     	; 0x656 <__fp_splitA+0xc>
 674:	86 95       	lsr	r24
 676:	71 05       	cpc	r23, r1
 678:	61 05       	cpc	r22, r1
 67a:	08 94       	sec
 67c:	08 95       	ret

0000067e <__fp_zero>:
 67e:	e8 94       	clt

00000680 <__fp_szero>:
 680:	bb 27       	eor	r27, r27
 682:	66 27       	eor	r22, r22
 684:	77 27       	eor	r23, r23
 686:	cb 01       	movw	r24, r22
 688:	97 f9       	bld	r25, 7
 68a:	08 95       	ret

0000068c <__gesf2>:
 68c:	0e 94 b8 03 	call	0x770	; 0x770 <__fp_cmp>
 690:	08 f4       	brcc	.+2      	; 0x694 <__gesf2+0x8>
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	08 95       	ret

00000696 <__mulsf3>:
 696:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__mulsf3x>
 69a:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_round>
 69e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_pscA>
 6a2:	38 f0       	brcs	.+14     	; 0x6b2 <__mulsf3+0x1c>
 6a4:	0e 94 05 03 	call	0x60a	; 0x60a <__fp_pscB>
 6a8:	20 f0       	brcs	.+8      	; 0x6b2 <__mulsf3+0x1c>
 6aa:	95 23       	and	r25, r21
 6ac:	11 f0       	breq	.+4      	; 0x6b2 <__mulsf3+0x1c>
 6ae:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_inf>
 6b2:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_nan>
 6b6:	11 24       	eor	r1, r1
 6b8:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_szero>

000006bc <__mulsf3x>:
 6bc:	0e 94 1d 03 	call	0x63a	; 0x63a <__fp_split3>
 6c0:	70 f3       	brcs	.-36     	; 0x69e <__mulsf3+0x8>

000006c2 <__mulsf3_pse>:
 6c2:	95 9f       	mul	r25, r21
 6c4:	c1 f3       	breq	.-16     	; 0x6b6 <__mulsf3+0x20>
 6c6:	95 0f       	add	r25, r21
 6c8:	50 e0       	ldi	r21, 0x00	; 0
 6ca:	55 1f       	adc	r21, r21
 6cc:	62 9f       	mul	r22, r18
 6ce:	f0 01       	movw	r30, r0
 6d0:	72 9f       	mul	r23, r18
 6d2:	bb 27       	eor	r27, r27
 6d4:	f0 0d       	add	r31, r0
 6d6:	b1 1d       	adc	r27, r1
 6d8:	63 9f       	mul	r22, r19
 6da:	aa 27       	eor	r26, r26
 6dc:	f0 0d       	add	r31, r0
 6de:	b1 1d       	adc	r27, r1
 6e0:	aa 1f       	adc	r26, r26
 6e2:	64 9f       	mul	r22, r20
 6e4:	66 27       	eor	r22, r22
 6e6:	b0 0d       	add	r27, r0
 6e8:	a1 1d       	adc	r26, r1
 6ea:	66 1f       	adc	r22, r22
 6ec:	82 9f       	mul	r24, r18
 6ee:	22 27       	eor	r18, r18
 6f0:	b0 0d       	add	r27, r0
 6f2:	a1 1d       	adc	r26, r1
 6f4:	62 1f       	adc	r22, r18
 6f6:	73 9f       	mul	r23, r19
 6f8:	b0 0d       	add	r27, r0
 6fa:	a1 1d       	adc	r26, r1
 6fc:	62 1f       	adc	r22, r18
 6fe:	83 9f       	mul	r24, r19
 700:	a0 0d       	add	r26, r0
 702:	61 1d       	adc	r22, r1
 704:	22 1f       	adc	r18, r18
 706:	74 9f       	mul	r23, r20
 708:	33 27       	eor	r19, r19
 70a:	a0 0d       	add	r26, r0
 70c:	61 1d       	adc	r22, r1
 70e:	23 1f       	adc	r18, r19
 710:	84 9f       	mul	r24, r20
 712:	60 0d       	add	r22, r0
 714:	21 1d       	adc	r18, r1
 716:	82 2f       	mov	r24, r18
 718:	76 2f       	mov	r23, r22
 71a:	6a 2f       	mov	r22, r26
 71c:	11 24       	eor	r1, r1
 71e:	9f 57       	subi	r25, 0x7F	; 127
 720:	50 40       	sbci	r21, 0x00	; 0
 722:	9a f0       	brmi	.+38     	; 0x74a <__mulsf3_pse+0x88>
 724:	f1 f0       	breq	.+60     	; 0x762 <__mulsf3_pse+0xa0>
 726:	88 23       	and	r24, r24
 728:	4a f0       	brmi	.+18     	; 0x73c <__mulsf3_pse+0x7a>
 72a:	ee 0f       	add	r30, r30
 72c:	ff 1f       	adc	r31, r31
 72e:	bb 1f       	adc	r27, r27
 730:	66 1f       	adc	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	91 50       	subi	r25, 0x01	; 1
 738:	50 40       	sbci	r21, 0x00	; 0
 73a:	a9 f7       	brne	.-22     	; 0x726 <__mulsf3_pse+0x64>
 73c:	9e 3f       	cpi	r25, 0xFE	; 254
 73e:	51 05       	cpc	r21, r1
 740:	80 f0       	brcs	.+32     	; 0x762 <__mulsf3_pse+0xa0>
 742:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_inf>
 746:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_szero>
 74a:	5f 3f       	cpi	r21, 0xFF	; 255
 74c:	e4 f3       	brlt	.-8      	; 0x746 <__mulsf3_pse+0x84>
 74e:	98 3e       	cpi	r25, 0xE8	; 232
 750:	d4 f3       	brlt	.-12     	; 0x746 <__mulsf3_pse+0x84>
 752:	86 95       	lsr	r24
 754:	77 95       	ror	r23
 756:	67 95       	ror	r22
 758:	b7 95       	ror	r27
 75a:	f7 95       	ror	r31
 75c:	e7 95       	ror	r30
 75e:	9f 5f       	subi	r25, 0xFF	; 255
 760:	c1 f7       	brne	.-16     	; 0x752 <__mulsf3_pse+0x90>
 762:	fe 2b       	or	r31, r30
 764:	88 0f       	add	r24, r24
 766:	91 1d       	adc	r25, r1
 768:	96 95       	lsr	r25
 76a:	87 95       	ror	r24
 76c:	97 f9       	bld	r25, 7
 76e:	08 95       	ret

00000770 <__fp_cmp>:
 770:	99 0f       	add	r25, r25
 772:	00 08       	sbc	r0, r0
 774:	55 0f       	add	r21, r21
 776:	aa 0b       	sbc	r26, r26
 778:	e0 e8       	ldi	r30, 0x80	; 128
 77a:	fe ef       	ldi	r31, 0xFE	; 254
 77c:	16 16       	cp	r1, r22
 77e:	17 06       	cpc	r1, r23
 780:	e8 07       	cpc	r30, r24
 782:	f9 07       	cpc	r31, r25
 784:	c0 f0       	brcs	.+48     	; 0x7b6 <__fp_cmp+0x46>
 786:	12 16       	cp	r1, r18
 788:	13 06       	cpc	r1, r19
 78a:	e4 07       	cpc	r30, r20
 78c:	f5 07       	cpc	r31, r21
 78e:	98 f0       	brcs	.+38     	; 0x7b6 <__fp_cmp+0x46>
 790:	62 1b       	sub	r22, r18
 792:	73 0b       	sbc	r23, r19
 794:	84 0b       	sbc	r24, r20
 796:	95 0b       	sbc	r25, r21
 798:	39 f4       	brne	.+14     	; 0x7a8 <__fp_cmp+0x38>
 79a:	0a 26       	eor	r0, r26
 79c:	61 f0       	breq	.+24     	; 0x7b6 <__fp_cmp+0x46>
 79e:	23 2b       	or	r18, r19
 7a0:	24 2b       	or	r18, r20
 7a2:	25 2b       	or	r18, r21
 7a4:	21 f4       	brne	.+8      	; 0x7ae <__fp_cmp+0x3e>
 7a6:	08 95       	ret
 7a8:	0a 26       	eor	r0, r26
 7aa:	09 f4       	brne	.+2      	; 0x7ae <__fp_cmp+0x3e>
 7ac:	a1 40       	sbci	r26, 0x01	; 1
 7ae:	a6 95       	lsr	r26
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	81 1d       	adc	r24, r1
 7b4:	81 1d       	adc	r24, r1
 7b6:	08 95       	ret

000007b8 <__utoa_ncheck>:
 7b8:	bb 27       	eor	r27, r27

000007ba <__utoa_common>:
 7ba:	fb 01       	movw	r30, r22
 7bc:	55 27       	eor	r21, r21
 7be:	aa 27       	eor	r26, r26
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	aa 1f       	adc	r26, r26
 7c6:	a4 17       	cp	r26, r20
 7c8:	10 f0       	brcs	.+4      	; 0x7ce <__utoa_common+0x14>
 7ca:	a4 1b       	sub	r26, r20
 7cc:	83 95       	inc	r24
 7ce:	50 51       	subi	r21, 0x10	; 16
 7d0:	b9 f7       	brne	.-18     	; 0x7c0 <__utoa_common+0x6>
 7d2:	a0 5d       	subi	r26, 0xD0	; 208
 7d4:	aa 33       	cpi	r26, 0x3A	; 58
 7d6:	08 f0       	brcs	.+2      	; 0x7da <__utoa_common+0x20>
 7d8:	a9 5d       	subi	r26, 0xD9	; 217
 7da:	a1 93       	st	Z+, r26
 7dc:	00 97       	sbiw	r24, 0x00	; 0
 7de:	79 f7       	brne	.-34     	; 0x7be <__utoa_common+0x4>
 7e0:	b1 11       	cpse	r27, r1
 7e2:	b1 93       	st	Z+, r27
 7e4:	11 92       	st	Z+, r1
 7e6:	cb 01       	movw	r24, r22
 7e8:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <strrev>

000007ec <strrev>:
 7ec:	dc 01       	movw	r26, r24
 7ee:	fc 01       	movw	r30, r24
 7f0:	67 2f       	mov	r22, r23
 7f2:	71 91       	ld	r23, Z+
 7f4:	77 23       	and	r23, r23
 7f6:	e1 f7       	brne	.-8      	; 0x7f0 <strrev+0x4>
 7f8:	32 97       	sbiw	r30, 0x02	; 2
 7fa:	04 c0       	rjmp	.+8      	; 0x804 <strrev+0x18>
 7fc:	7c 91       	ld	r23, X
 7fe:	6d 93       	st	X+, r22
 800:	70 83       	st	Z, r23
 802:	62 91       	ld	r22, -Z
 804:	ae 17       	cp	r26, r30
 806:	bf 07       	cpc	r27, r31
 808:	c8 f3       	brcs	.-14     	; 0x7fc <strrev+0x10>
 80a:	08 95       	ret

0000080c <_exit>:
 80c:	f8 94       	cli

0000080e <__stop_program>:
 80e:	ff cf       	rjmp	.-2      	; 0x80e <__stop_program>
